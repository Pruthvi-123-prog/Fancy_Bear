const { WebsiteScanner } = require('./scanner/index(1)');

async function demonstrateFullCapabilities() {
  console.log('üöÄ Demonstrating Professional-Grade Security Scanner');
  console.log('==================================================\n');

  const scanner = new WebsiteScanner();
  
  // Test multiple targets to show comprehensive coverage
  const testTargets = [
    {
      name: 'HTTPBin API Testing',
      url: 'https://httpbin.org',
      description: 'API testing service with various endpoints'
    },
    {
      name: 'SDIT Website',
      url: 'https://sdit.ac.in',
      description: 'Educational institution website'
    }
  ];

  for (const target of testTargets) {
    console.log(`\nüéØ Testing: ${target.name}`);
    console.log(`üìå URL: ${target.url}`);
    console.log(`üìù Description: ${target.description}`);
    console.log('‚îÄ'.repeat(60));

    try {
      const results = await scanner.runScan(target.url, {
        security: true,
        performance: false, // Focus on security for demo
        seo: false,
        accessibility: false
      });

      // Count findings by OWASP category
      const owaspFindings = {};
      let totalFindings = 0;
      
      if (results.advancedSecurity) {
        results.advancedSecurity.forEach(finding => {
          if (!owaspFindings[finding.category]) {
            owaspFindings[finding.category] = [];
          }
          owaspFindings[finding.category].push(finding);
          totalFindings++;
        });
      }

      const basicSecurityCount = results.security ? results.security.length : 0;
      
      console.log(`\nüìä Results Summary:`);
      console.log(`   Total Security Issues: ${basicSecurityCount + totalFindings}`);
      console.log(`   Basic Security: ${basicSecurityCount} issues`);
      console.log(`   Advanced Security: ${totalFindings} issues`);
      console.log(`   OWASP Categories Covered: ${Object.keys(owaspFindings).length}/10`);

      if (Object.keys(owaspFindings).length > 0) {
        console.log('\nüõ°Ô∏è OWASP Top 10 Findings:');
        Object.entries(owaspFindings).forEach(([category, findings]) => {
          console.log(`\n   üìã ${category} (${findings.length} issues):`);
          findings.forEach((finding, i) => {
            const severity = finding.severity.toUpperCase();
            const icon = severity === 'CRITICAL' ? 'üö®' : 
                        severity === 'HIGH' ? 'üî¥' : 
                        severity === 'MEDIUM' ? 'üü°' : 'üü¢';
            console.log(`      ${i+1}. ${icon} ${finding.issue}`);
          });
        });
      }

      // Show most critical findings
      const allFindings = [
        ...(results.security || []),
        ...(results.advancedSecurity || [])
      ];
      
      const criticalFindings = allFindings.filter(f => 
        f.severity === 'critical' || f.severity === 'high'
      );
      
      if (criticalFindings.length > 0) {
        console.log(`\nüö® Critical/High Severity Issues (${criticalFindings.length}):`);
        criticalFindings.slice(0, 5).forEach((finding, i) => {
          console.log(`   ${i+1}. [${finding.category}] ${finding.issue}`);
          console.log(`      üí° ${finding.recommendation}`);
        });
      }

    } catch (error) {
      console.error(`‚ùå Scan failed for ${target.name}: ${error.message}`);
    }

    console.log('\n' + '‚ïê'.repeat(60));
  }

  console.log('\n‚úÖ SCANNER CAPABILITIES DEMONSTRATED');
  console.log('=====================================');
  console.log('üõ°Ô∏è OWASP Top 10 2021 Coverage:');
  console.log('   ‚Ä¢ A01: Broken Access Control');
  console.log('   ‚Ä¢ A02: Cryptographic Failures'); 
  console.log('   ‚Ä¢ A03: Injection (SQL, XSS, Command, LDAP)');
  console.log('   ‚Ä¢ A04: Insecure Design');
  console.log('   ‚Ä¢ A05: Security Misconfiguration');
  console.log('   ‚Ä¢ A06: Vulnerable and Outdated Components');
  console.log('   ‚Ä¢ A07: Identification and Authentication Failures');
  console.log('   ‚Ä¢ A08: Software and Data Integrity Failures');
  console.log('   ‚Ä¢ A09: Security Logging and Monitoring Failures');
  console.log('   ‚Ä¢ A10: Server-Side Request Forgery (SSRF)');
  
  console.log('\nüîç Advanced Testing Techniques:');
  console.log('   ‚Ä¢ Directory Traversal Testing');
  console.log('   ‚Ä¢ Admin Panel Discovery');
  console.log('   ‚Ä¢ HTTP Method Testing');
  console.log('   ‚Ä¢ Parameter Pollution');
  console.log('   ‚Ä¢ SSL/TLS Certificate Analysis');
  console.log('   ‚Ä¢ Weak Cipher Detection');
  console.log('   ‚Ä¢ SQL Injection Payloads');
  console.log('   ‚Ä¢ XSS Vector Testing');
  console.log('   ‚Ä¢ Command Injection Testing');
  console.log('   ‚Ä¢ LDAP Injection Testing');
  console.log('   ‚Ä¢ Business Logic Flaw Detection');
  console.log('   ‚Ä¢ Sequential ID Enumeration');
  console.log('   ‚Ä¢ Rate Limiting Assessment');
  console.log('   ‚Ä¢ Information Disclosure Detection');
  console.log('   ‚Ä¢ Session Management Analysis');
  console.log('   ‚Ä¢ Component Vulnerability Scanning');
  console.log('   ‚Ä¢ Authentication Security Testing');
  console.log('   ‚Ä¢ Integrity Verification');
  console.log('   ‚Ä¢ SSRF Vulnerability Detection');
  
  console.log('\nüìà Professional Features:');
  console.log('   ‚Ä¢ Parallel scanning for speed');
  console.log('   ‚Ä¢ Detailed severity classification');
  console.log('   ‚Ä¢ Evidence collection');
  console.log('   ‚Ä¢ Actionable recommendations');
  console.log('   ‚Ä¢ Comprehensive reporting');
  console.log('   ‚Ä¢ Error handling and resilience');
  
  console.log('\nüéØ This scanner now provides professional-grade');
  console.log('   penetration testing capabilities comparable to');
  console.log('   commercial tools like pentest-tools.com!');
}

demonstrateFullCapabilities();
